class MyCircularQueue:
    def __init__(self, k: int):
        self.f=-1
        self.r=-1
        self.q=[-1]*k
    def enQueue(self, value: int) -> bool:
        if(self.isFull()):
            return False
        self.r=(self.r+1)%(len(self.q))
        self.q[self.r]=value
        if(self.f==-1):
            self.f=0
        return True
    
    def deQueue(self) -> bool:
        if(self.isEmpty()):
            return False
        self.x=self.q[self.f]
        if(self.f==self.r):
            self.f=-1
            self.r=-1
        else:
            self.f=(self.f+1)%(len(self.q))
        return True

    def Front(self) -> int:
        if(self.f!=-1):
            return self.q[self.f]
        return -1

    def Rear(self) -> int:
        if(self.r!=-1):
            return self.q[self.r]
        return -1

    def isEmpty(self) -> bool:
        if(self.f==-1):
            return True
        return False

    def isFull(self) -> bool:
        if(self.f==(self.r+1)%(len(self.q))):
            return True
        return False

# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
